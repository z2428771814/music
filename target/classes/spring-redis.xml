<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.1.xsd
        http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd">

	<!-- 连接池配置 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!-- 最大连接数 -->
		<property name="maxTotal" value="30"></property>
		<!-- 最大空闲连接数 -->
		<property name="maxIdle" value="10"></property>
		<!-- 每次释放链接的最大数目 -->
		<property name="numTestsPerEvictionRun" value="1024" ></property>
		<!-- 释放链接的扫描间隔 -->
		<property name="timeBetweenEvictionRunsMillis" value="30000"></property>
		<!-- 链接最小空闲时间 -->
		<property name="minEvictableIdleTimeMillis" value="1800000"></property>
		<!-- 链接空闲多久后释放，空闲时间》该值 且 空闲时间链接》最大空闲链接数 时 直接释放 -->
		<property name="softMinEvictableIdleTimeMillis" value="10000"></property>
		<!-- 获取连接时最大等待毫秒数，小于零；阻塞不确定的时间，默认-1 -->
		<property name="maxWaitMillis" value="1500"></property>
		<!-- 在获取链接的时候检查有效性，默认false -->
		<property name="testOnBorrow" value="true"></property>
		<!-- 在空闲时检查有效性。默认false -->
		<property name="testWhileIdle" value="true"></property>
		<!-- 链接耗尽时是否阻塞，false报异常，true阻塞知道超时，默认ture -->
		<property name="blockWhenExhausted" value="false"></property>
	</bean>
	
	<!-- 配置redis的链接参数，如需要密码，请配置database是redis的指定的那个库 -->
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.host}"></property>
		<property name="port" value="${redis.port}"></property>
		<!-- <propety name="password" value="${redis.pssword}"></propety> -->
		<property name="database" value="${redis.dbIndex}"></property>
		<property name="poolConfig" ref="jedisPoolConfig"></property>
	</bean>
	
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory"></property>
		
		<!-- 将key和value序列化后存入redis，读取是在进行反序列化 -->
		<!-- 对key的默认序列化器 -->
		<property name="keySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
		</property>
		<!-- 对value的默认序列化器 -->
		<property name="valueSerializer">
			<bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"></bean>
		</property>
		<!-- 对hash结果数据的hashkey的默认序列化器 -->
		<property name="hashKeySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
		</property>
		<!-- 对hash结果数据的hashvalue的默认序列化器 -->
		<property name="hashValueSerializer">
			<bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"></bean>
		</property>
	
	</bean>
	
	
</beans>